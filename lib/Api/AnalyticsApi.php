<?php
/**
 * AnalyticsApi
 * PHP version 5
 *
 * @category Class
 * @package  Thas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Thieme Meulenhoff Analytics Data API
 *
 * First setup of an API to exchange Learning Analytics. This API is based on events (inspired by Caliper AnalyticsÂ® Specification, version 1.1) that are send to the api. We use a number of events.  The view event is used to register page views for theory.  The grade event is used to register results of doing assignments. Such a result is modelled as a score.  The assesment event is used to register the completion of an assignment. This information is transfered as an attempt.  Both theory and assignments are considered digital resources. An assignment is an assignable digital resource.  A student is seen as an actor.
 *
 * OpenAPI spec version: 0.4.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Thas\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Thas\ApiException;
use Thas\Configuration;
use Thas\HeaderSelector;
use Thas\ObjectSerializer;

/**
 * AnalyticsApi Class Doc Comment
 *
 * @category Class
 * @package  Thas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AnalyticsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation learningAnalyticsCourseCoursePost
     *
     * @param  string $course the course (required)
     * @param  OneOfViewEventGradeEventAssignableEventAdaptiveEventSessionEventNavigationEventToolUseEventMediaEvent[] $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event (optional)
     *
     * @throws \Thas\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function learningAnalyticsCourseCoursePost($course, $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event = null)
    {
        $this->learningAnalyticsCourseCoursePostWithHttpInfo($course, $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event);
    }

    /**
     * Operation learningAnalyticsCourseCoursePostWithHttpInfo
     *
     * @param  string $course the course (required)
     * @param  OneOfViewEventGradeEventAssignableEventAdaptiveEventSessionEventNavigationEventToolUseEventMediaEvent[] $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event (optional)
     *
     * @throws \Thas\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function learningAnalyticsCourseCoursePostWithHttpInfo($course, $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event = null)
    {
        $request = $this->learningAnalyticsCourseCoursePostRequest($course, $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation learningAnalyticsCourseCoursePostAsync
     *
     * 
     *
     * @param  string $course the course (required)
     * @param  OneOfViewEventGradeEventAssignableEventAdaptiveEventSessionEventNavigationEventToolUseEventMediaEvent[] $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function learningAnalyticsCourseCoursePostAsync($course, $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event = null)
    {
        return $this->learningAnalyticsCourseCoursePostAsyncWithHttpInfo($course, $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation learningAnalyticsCourseCoursePostAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $course the course (required)
     * @param  OneOfViewEventGradeEventAssignableEventAdaptiveEventSessionEventNavigationEventToolUseEventMediaEvent[] $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function learningAnalyticsCourseCoursePostAsyncWithHttpInfo($course, $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event = null)
    {
        $returnType = '';
        $request = $this->learningAnalyticsCourseCoursePostRequest($course, $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'learningAnalyticsCourseCoursePost'
     *
     * @param  string $course the course (required)
     * @param  OneOfViewEventGradeEventAssignableEventAdaptiveEventSessionEventNavigationEventToolUseEventMediaEvent[] $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function learningAnalyticsCourseCoursePostRequest($course, $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event = null)
    {
        // verify the required parameter 'course' is set
        if ($course === null || (is_array($course) && count($course) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $course when calling learningAnalyticsCourseCoursePost'
            );
        }

        $resourcePath = '/learningAnalytics/course/{course}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($course !== null) {
            $resourcePath = str_replace(
                '{' . 'course' . '}',
                ObjectSerializer::toPathValue($course),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event)) {
            $_tempBody = $one_of_view_event_grade_event_assignable_event_adaptive_event_session_event_navigation_event_tool_use_event_media_event;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
